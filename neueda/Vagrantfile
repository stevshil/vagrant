Vagrant.configure(2) do | config |
  # Basic Linux CentOS 7 64 bit
  # Neueda Unix as an enterprise platform
  config.vm.define :neueda do | neueda |
    config.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      #vb.cpus = 1
      vb.name = "Neueda"
      vb.gui = true
    end
    neueda.vm.host_name = "Neueda"
    neueda.vm.provision :shell, :path => 'bin/neueda-linux.sh'
  end

  # Neueda grad
  config.vm.define :cvm do | cvm |
    config.vm.provider "virtualbox" do |vb|
      vb.memory = 4096
      vb.name = "NeuedaC"
      vb.gui = true
      vb.customize ['modifyvm', :id,
          '--clipboard', 'bidirectional',
          '--vram', '32']
      vb.customize ["storageattach", :id, "--storagectl", "IDE Controller",
          "--port", "0", "--device", "0", "--type", "dvddrive", "--medium", "emptydrive"]
    end
    cvm.vm.host_name = "NeuedaDev"
    cvm.vm.provision :shell, :path => 'bin/citivm.sh'
    cvm.vm.network "public_network"
  end


  # Neueda project VM
  config.vm.define :np do | np |
    config.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.name = "NeuedaProject"
    end
    np.vm.host_name = "axis2"
    np.vm.provision :shell, :path => 'bin/neueda-project.sh'
    np.vm.network "forwarded_port", guest: 8080, host: 18080, protocol: 'tcp'
  end

  # Neueda SQL using MySQL
  config.vm.define :neuedasql do | mysql |
    config.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.name = "Neueda_MySQL"
      vb.gui = true
    end
    mysql.vm.host_name = "NeuedaMySQL"
    mysql.vm.provision :shell, :path => 'bin/neueda-mysql.sh'
  end

  # Neueda Oracle Express
  config.vm.define :oracle do | oracle |
    config.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.name = "oracle"
      vb.gui = true
    end
    oracle.vm.host_name = "oracle"
    oracle.vm.provision :shell, :path => 'bin/neueda-oracle.sh'
  end

  # ITRS with Docker and trade-app all in one
  config.vm.define :itrsta do | itrsta |
    config.vm.provider "virtualbox" do | vb |
      vb.memory = 2048
      vb.name = "ITRS_TA"
    end
    itrsta.vm.host_name = "itrs"
    itrsta.vm.provision "shell", :path => 'bin/itrs-tradeapp.sh', :args => "#{ENV['ITRS']}"
    itrsta.vm.network "private_network", ip: "192.168.1.200", virtualbox__intnet: true
    itrsta.vm.network "forwarded_port", guest: 55801, host: 55801, protocol: 'tcp'
    itrsta.vm.network "forwarded_port", guest: 55803, host: 55803, protocol: 'tcp'
    itrsta.vm.network "forwarded_port", guest: 7041, host: 7041, protocol: 'tcp'
    itrsta.vm.network "forwarded_port", guest: 3306, host: 3306, protocol: 'tcp'
    itrsta.vm.network "forwarded_port", guest: 8080, host: 8080, protocol: 'tcp'
    itrsta.vm.network "forwarded_port", guest: 9990, host: 9990, protocol: 'tcp'
    itrsta.vm.network "forwarded_port", guest: 8161, host: 8161, protocol: 'tcp'
    itrsta.vm.network "forwarded_port", guest: 61613, host: 61613, protocol: 'tcp'
    itrsta.vm.network "forwarded_port", guest: 61616, host: 61616, protocol: 'tcp'
  end

  # Linux router to bridge a physical network through Laptop NAT
  config.vm.define :router do | router |
    config.vm.provider "virtualbox" do |vb|
      vb.memory = 1024
      vb.name = "ROUTER"
    end
    router.vm.network "public_network", bridge: 'em1', ip: "192.168.1.254"
    router.vm.host_name = "router.training.local"
    router.vm.provision "shell", :path => 'bin/router.sh'
  end

  # Tomcat server
  config.vm.define :tomcat do | tomcat |
	config.vm.provider "virtualbox" do | vb |
      vb.memory = 1024
      vb.name = "TOMCAT"
    end
	tomcat.vm.host_name = "tomcat"
	tomcat.vm.provision "shell", :path => 'bin/tomcat.sh'
	tomcat.vm.network "forwarded_port", guest: 8080, host: 1180, protocol: 'tcp'
  end

  # JBoss server
  config.vm.define :wildfly do | wildfly |
	config.vm.provider "virtualbox" do | vb |
      vb.memory = 2048
      vb.name = "Wildfly"
    end
	wildfly.vm.host_name = "wildfly"
	wildfly.vm.provision "shell", :path => 'bin/jboss.sh'
	wildfly.vm.network "forwarded_port", guest: 8080, host: 1280, protocol: 'tcp'
  end

    # Logstash server
    config.vm.define :elk do | elk |
	  config.vm.provider "virtualbox" do | vb |
          vb.memory = 4096
          vb.name = "ELK"
          vb.gui = true
          vb.customize ['modifyvm', :id,
              '--clipboard', 'bidirectional',
              '--vram', '32']
          vb.customize ["storageattach", :id, "--storagectl", "IDE Controller",
              "--port", "0", "--device", "0", "--type", "dvddrive", "--medium", "emptydrive"]
        end
	    elk.vm.host_name = "elk"
	    elk.vm.provision "shell", :path => 'bin/logstash.sh'
	    elk.vm.network "forwarded_port", guest: 5044, host: 5044, protocol: 'tcp'
	    elk.vm.network "forwarded_port", guest: 5601, host: 5601, protocol: 'tcp'
            elk.vm.network "forwarded_port", guest: 9200, host: 9200, protocol: 'tcp'
            elk.vm.network "forwarded_port", guest: 9300, host: 9300, protocol: 'tcp'
            elk.vm.network "forwarded_port", guest: 55804, host: 55804, protocol: 'tcp'
    	    elk.vm.network "private_network", ip: "192.168.1.150", virtualbox__intnet: true
    end

    # Docker test VM
    config.vm.define :docker do | docker |
      config.vm.provider "virtualbox" do | vb |
        vb.memory = 2048
        vb.name = "Docker"
      end
      docker.vm.host_name = "docker"
      docker.vm.provision "shell", :path => 'bin/docker.sh'
      #docker.vm.network "forwarded_port", guest: 80, host: 80, protocol: 'tcp'
      docker.vm.network "forwarded_port", guest: 1080, host: 1080, protocol: 'tcp'
      docker.vm.network "forwarded_port", guest: 1180, host: 1180, protocol: 'tcp'
      docker.vm.network "forwarded_port", guest: 8080, host: 8080, protocol: 'tcp'
      docker.vm.network "forwarded_port", guest: 50000, host: 50000, protocol: 'tcp'
    end

    # TeamCity
    config.vm.define :teamcity do | teamcity |
      config.vm.provider "virtualbox" do | vb |
        vb.memory = 2048
        vb.name = "TeamCity"
      end
      teamcity.vm.host_name = "teamcity.localdomain"
      teamcity.vm.provision "shell", :path => "bin/teamcity.sh"
      teamcity.vm.network "private_network", ip: "192.168.1.11", virtualbox__intnet: true
      teamcity.vm.network "forwarded_port", guest: 8111, host: 8111, protocol: 'tcp'
    end

    # TeamCity Agent
    config.vm.define :tcagent do | tcagent |
      config.vm.provider "virtualbox" do | vb |
        vb.memory = 2048
        vb.name = "TeamCity Agent"
      end
      tcagent.vm.host_name = "tcagent.localdomain"
      tcagent.vm.provision "shell", :path => "bin/tcagent.sh"
      tcagent.vm.network "private_network", ip: "192.168.1.21", virtualbox__intnet: true
    end

    # uDeploy
    config.vm.define :udeploy do | udeploy |
      config.vm.provider "virtualbox" do | vb |
        vb.memory = 4096
        vb.name = "uDeploy"
      end
      udeploy.vm.host_name = "udeploy.localdomain"
      udeploy.vm.provision "shell", :path => "bin/udeploy.sh"
      udeploy.vm.network "private_network", ip: "192.168.1.10", virtualbox__intnet: true
      udeploy.vm.network "forwarded_port", guest: 8080, host: 8080, protocol: 'tcp'
      udeploy.vm.network "forwarded_port", guest: 8111, host: 8111, protocol: 'tcp'
    end
    # uDeploy client where app will be deployed
    config.vm.define :uapp do | uapp |
      config.vm.provider "virtualbox" do | vb |
        vb.memory = 1024
        vb.name = "uApp"
      end
      uapp.vm.host_name = "uapp.localdomain"
      uapp.vm.provision "shell", :path => "bin/uapp.sh"
      uapp.vm.network "private_network", ip: "192.168.1.100", virtualbox__intnet: true
    end

    # OpenShift
    config.vm.define :os do | os |
      config.vm.provider "virtualbox" do | vb |
        vb.memory = 2048
        vb.name = "OpenShift"
      end
      os.vm.host_name = "openshift.localdomain"
      os.vm.provision "shell", :path => "bin/openshift.sh"
      os.vm.network "private_network", ip: "192.168.1.51", virtualbox__intnet: true
      #os.vm.box = "mvbcoding/awslinux"
      config.vm.box = "bento/centos-7.4"
    end

    # IBM License
    config.vm.define :ibmlic do | ibmlic |
      config.vm.provider "virtualbox" do | vb |
        vb.memory = 2048
        vb.name = "IBM License"
      end
      ibmlic.vm.host_name = "ibmlic.localdomain"
      ibmlic.vm.provision "shell", :path => "bin/ibmlic.sh"
      ibmlic.vm.network "private_network", ip: "192.168.1.61", virtualbox__intnet: true
      config.vm.box = "bento/centos-7.4"
    end


  # Defaults
  config.vm.box = "bento/centos-7.2"
  config.ssh.username = "vagrant"
  #config.ssh.password = "vagrant"
  #config.ssh.private_key_path= "#{ENV['HOME']}/.ssh/vagrant_id"
end
